"""
Scheduler para execu√ß√£o autom√°tica de tarefas do Insurance News Agent
Vers√£o corrigida - campos corretos do modelo
"""

import schedule
import time
import threading
from datetime import datetime, timedelta
from typing import Optional, Callable, Dict, Any
import logging
from pathlib import Path

from src.main import InsuranceNewsAgent
from src.utils.logger import get_logger
from src.email_sender.email_manager import EmailManager

class NewsScheduler:
    """Agendador de tarefas para coleta autom√°tica de not√≠cias"""
    
    def __init__(self):
        """Inicializa o scheduler"""
        self.logger = get_logger("scheduler")
        self.agent = None
        self.email_manager = None
        self.is_running = False
        self.scheduler_thread = None
        
        # Configura√ß√µes padr√£o
        self.config = {
            'collection_time': '07:00',  # Hor√°rio da coleta di√°ria (UTC)
            'timezone': 'UTC',
            'max_retries': 3,
            'retry_delay_minutes': 30,
            'cleanup_days': 7  # Dias para manter arquivos antigos
        }
        
        self.logger.info("NewsScheduler inicializado")
    
    def initialize_components(self) -> bool:
        """
        Inicializa os componentes necess√°rios
        
        Returns:
            bool: True se inicializa√ß√£o foi bem-sucedida
        """
        try:
            # Inicializar agente de not√≠cias
            self.agent = InsuranceNewsAgent()
            self.logger.info("‚úÖ InsuranceNewsAgent inicializado")
            
            # Inicializar gerenciador de e-mail
            self.email_manager = EmailManager()
            self.logger.info("‚úÖ EmailManager inicializado")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na inicializa√ß√£o dos componentes: {e}")
            return False
    
    def setup_daily_schedule(self) -> None:
        """Configura o agendamento di√°rio"""
        collection_time = self.config['collection_time']
        
        # Agendar coleta di√°ria
        schedule.every().day.at(collection_time).do(self._run_daily_collection)
        
        # Agendar limpeza semanal (domingo √†s 02:00)
        schedule.every().sunday.at("02:00").do(self._run_cleanup)
        
        self.logger.info(f"üìÖ Agendamento configurado: coleta di√°ria √†s {collection_time} UTC")
    
    def _run_daily_collection(self) -> None:
        """Executa a coleta di√°ria de not√≠cias"""
        self.logger.info("üöÄ Iniciando coleta di√°ria de not√≠cias")
        
        try:
            # Executar coleta
            result = self.agent.collect_and_analyze_news()
            
            if result and result.get('success', False):
                # Obter estat√≠sticas do resultado
                total_articles = result.get('total_articles', 0)
                duplicates_removed = result.get('duplicates_removed', 0)
                report_path = result.get('report_path', '')
                
                self.logger.info(f"‚úÖ Coleta conclu√≠da: {total_articles} artigos, {duplicates_removed} duplicatas removidas")
                
                # Enviar e-mail se relat√≥rio foi gerado
                if report_path and Path(report_path).exists():
                    self._send_daily_email(report_path, total_articles)
                else:
                    self.logger.warning("‚ö†Ô∏è Relat√≥rio n√£o foi gerado - e-mail n√£o enviado")
                    
            else:
                error_msg = result.get('error', 'Erro desconhecido') if result else 'Falha na coleta'
                self.logger.error(f"‚ùå Falha na coleta: {error_msg}")
                self._send_error_notification("Falha na coleta di√°ria", error_msg)
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante coleta di√°ria: {e}")
            self._send_error_notification("Erro na coleta di√°ria", str(e))
    
    def _send_daily_email(self, report_path: str, total_articles: int) -> None:
        """
        Envia e-mail com relat√≥rio di√°rio
        
        Args:
            report_path: Caminho para o arquivo de relat√≥rio
            total_articles: N√∫mero total de artigos coletados
        """
        try:
            if not self.email_manager:
                self.logger.warning("‚ö†Ô∏è EmailManager n√£o inicializado - pulando envio de e-mail")
                return
            
            # Preparar dados do e-mail
            today = datetime.now().strftime('%Y-%m-%d')
            subject = f"Relat√≥rio Di√°rio - Not√≠cias de Seguros - {today}"
            
            # Carregar relat√≥rio HTML se existir
            html_report_path = report_path.replace('.json', '.html')
            
            if Path(html_report_path).exists():
                with open(html_report_path, 'r', encoding='utf-8') as f:
                    html_content = f.read()
            else:
                html_content = f"""
                <h2>Relat√≥rio Di√°rio - {today}</h2>
                <p>Total de artigos coletados: {total_articles}</p>
                <p>Relat√≥rio detalhado em anexo.</p>
                """
            
            # Enviar e-mail
            success = self.email_manager.send_daily_report(
                subject=subject,
                html_content=html_content,
                attachments=[report_path] if Path(report_path).exists() else []
            )
            
            if success:
                self.logger.info("‚úÖ E-mail di√°rio enviado com sucesso")
            else:
                self.logger.error("‚ùå Falha no envio do e-mail di√°rio")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar e-mail di√°rio: {e}")
    
    def _send_error_notification(self, error_type: str, error_message: str) -> None:
        """
        Envia notifica√ß√£o de erro
        
        Args:
            error_type: Tipo do erro
            error_message: Mensagem de erro
        """
        try:
            if not self.email_manager:
                self.logger.warning("‚ö†Ô∏è EmailManager n√£o inicializado - pulando notifica√ß√£o de erro")
                return
            
            subject = f"Erro - Insurance News Agent - {error_type}"
            
            html_content = f"""
            <h2>Erro no Insurance News Agent</h2>
            <p><strong>Tipo:</strong> {error_type}</p>
            <p><strong>Data/Hora:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
            <p><strong>Mensagem:</strong></p>
            <pre>{error_message}</pre>
            """
            
            success = self.email_manager.send_error_notification(
                subject=subject,
                html_content=html_content
            )
            
            if success:
                self.logger.info("‚úÖ Notifica√ß√£o de erro enviada")
            else:
                self.logger.error("‚ùå Falha no envio da notifica√ß√£o de erro")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar notifica√ß√£o: {e}")
    
    def _run_cleanup(self) -> None:
        """Executa limpeza de arquivos antigos"""
        self.logger.info("üßπ Iniciando limpeza de arquivos antigos")
        
        try:
            cleanup_date = datetime.now() - timedelta(days=self.config['cleanup_days'])
            base_dir = Path(__file__).parent.parent
            
            # Diret√≥rios para limpeza
            cleanup_dirs = [
                base_dir / 'data' / 'reports',
                base_dir / 'logs',
                base_dir / 'logs' / 'email',
                base_dir / 'logs' / 'scrapers'
            ]
            
            total_removed = 0
            
            for directory in cleanup_dirs:
                if directory.exists():
                    for file_path in directory.iterdir():
                        if file_path.is_file():
                            # Verificar se arquivo √© antigo
                            file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                            
                            if file_time < cleanup_date:
                                try:
                                    file_path.unlink()
                                    total_removed += 1
                                    self.logger.debug(f"Removido: {file_path}")
                                except Exception as e:
                                    self.logger.warning(f"Erro ao remover {file_path}: {e}")
            
            self.logger.info(f"‚úÖ Limpeza conclu√≠da: {total_removed} arquivos removidos")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante limpeza: {e}")
    
    def run_manual_collection(self) -> Dict[str, Any]:
        """
        Executa coleta manual (para testes ou execu√ß√£o sob demanda)
        
        Returns:
            Dict: Resultado da coleta
        """
        self.logger.info("üîß Executando coleta manual")
        
        try:
            if not self.agent:
                if not self.initialize_components():
                    return {'success': False, 'error': 'Falha na inicializa√ß√£o dos componentes'}
            
            result = self.agent.collect_and_analyze_news()
            
            if result and result.get('success', False):
                self.logger.info("‚úÖ Coleta manual conclu√≠da com sucesso")
            else:
                self.logger.error("‚ùå Falha na coleta manual")
            
            return result
            
        except Exception as e:
            error_msg = f"Erro na coleta manual: {e}"
            self.logger.error(f"‚ùå {error_msg}")
            return {'success': False, 'error': error_msg}
    
    def start(self) -> None:
        """Inicia o scheduler em thread separada"""
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è Scheduler j√° est√° em execu√ß√£o")
            return
        
        # Inicializar componentes
        if not self.initialize_components():
            self.logger.error("‚ùå Falha na inicializa√ß√£o - scheduler n√£o iniciado")
            return
        
        # Configurar agendamentos
        self.setup_daily_schedule()
        
        # Iniciar thread do scheduler
        self.is_running = True
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        self.logger.info("üöÄ Scheduler iniciado com sucesso")
    
    def stop(self) -> None:
        """Para o scheduler"""
        if not self.is_running:
            self.logger.warning("‚ö†Ô∏è Scheduler n√£o est√° em execu√ß√£o")
            return
        
        self.is_running = False
        schedule.clear()
        
        if self.scheduler_thread and self.scheduler_thread.is_alive():
            self.scheduler_thread.join(timeout=5)
        
        self.logger.info("üõë Scheduler parado")
    
    def _run_scheduler(self) -> None:
        """Loop principal do scheduler"""
        self.logger.info("üìÖ Loop do scheduler iniciado")
        
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # Verificar a cada minuto
            except Exception as e:
                self.logger.error(f"‚ùå Erro no loop do scheduler: {e}")
                time.sleep(60)
        
        self.logger.info("üìÖ Loop do scheduler finalizado")
    
    def get_next_run_time(self) -> Optional[datetime]:
        """
        Retorna o pr√≥ximo hor√°rio de execu√ß√£o agendado
        
        Returns:
            Optional[datetime]: Pr√≥ximo hor√°rio de execu√ß√£o
        """
        jobs = schedule.get_jobs()
        if not jobs:
            return None
        
        next_run = min(job.next_run for job in jobs)
        return next_run
    
    def get_status(self) -> Dict[str, Any]:
        """
        Retorna status do scheduler
        
        Returns:
            Dict: Status atual
        """
        next_run = self.get_next_run_time()
        
        return {
            'is_running': self.is_running,
            'next_run': next_run.isoformat() if next_run else None,
            'scheduled_jobs': len(schedule.get_jobs()),
            'agent_initialized': self.agent is not None,
            'email_manager_initialized': self.email_manager is not None,
            'collection_time': self.config['collection_time'],
            'cleanup_days': self.config['cleanup_days']
        }


def main():
    """Fun√ß√£o principal para execu√ß√£o do scheduler"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)s | %(name)s | %(message)s'
    )
    
    # Criar e iniciar scheduler
    scheduler = NewsScheduler()
    
    try:
        scheduler.start()
        
        # Manter o programa rodando
        while True:
            time.sleep(60)
            
    except KeyboardInterrupt:
        print("\nüõë Interrompido pelo usu√°rio")
        scheduler.stop()
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        scheduler.stop()


if __name__ == "__main__":
    main()
