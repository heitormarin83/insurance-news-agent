name: Daily Insurance News Collection

on:
  # Executa todos os dias às 7:00 UTC (4:00 BRT)
  schedule:
    - cron: '0 7 * * *'
  
  # Permite execução manual
  workflow_dispatch:
    inputs:
      send_email:
        description: 'Enviar e-mail após coleta'
        required: false
        default: 'true'
        type: boolean
      test_mode:
        description: 'Modo de teste (não envia e-mails)'
        required: false
        default: 'false'
        type: boolean

jobs:
  collect-and-send:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create config directories
      run: |
        mkdir -p config
        mkdir -p data/reports
        mkdir -p logs
    
    - name: Setup Gmail credentials
      env:
        GMAIL_CREDENTIALS: ${{ secrets.GMAIL_CREDENTIALS }}
        GMAIL_TOKEN: ${{ secrets.GMAIL_TOKEN }}
      run: |
        echo "$GMAIL_CREDENTIALS" > config/credentials.json
        if [ ! -z "$GMAIL_TOKEN" ]; then
          echo "$GMAIL_TOKEN" > config/token.json
        fi
    
    - name: Setup email configuration
      env:
        EMAIL_RECIPIENTS_DAILY: ${{ secrets.EMAIL_RECIPIENTS_DAILY }}
        EMAIL_RECIPIENTS_ALERTS: ${{ secrets.EMAIL_RECIPIENTS_ALERTS }}
        EMAIL_RECIPIENTS_ERRORS: ${{ secrets.EMAIL_RECIPIENTS_ERRORS }}
      run: |
        python scripts/setup_email_config.py
    
    - name: Run news collection
      id: collection
      run: |
        python -m src.main --action collect > collection_output.log 2>&1
        echo "collection_status=$?" >> $GITHUB_OUTPUT
        
        # Captura estatísticas para o summary
        if [ -f "data/reports/relatorio_seguros_$(date +%Y-%m-%d).json" ]; then
          echo "report_generated=true" >> $GITHUB_OUTPUT
          TOTAL_ARTICLES=$(python -c "import json; data=json.load(open('data/reports/relatorio_seguros_$(date +%Y-%m-%d).json')); print(data['total_articles'])")
          OPEN_INSURANCE=$(python -c "import json; data=json.load(open('data/reports/relatorio_seguros_$(date +%Y-%m-%d).json')); print(len(data['open_insurance_articles']))")
          echo "total_articles=$TOTAL_ARTICLES" >> $GITHUB_OUTPUT
          echo "open_insurance_articles=$OPEN_INSURANCE" >> $GITHUB_OUTPUT
        else
          echo "report_generated=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Send daily report email
      if: steps.collection.outputs.collection_status == '0' && (github.event.inputs.send_email != 'false' && github.event.inputs.test_mode != 'true')
      env:
        SEND_EMAIL: ${{ github.event.inputs.send_email || 'true' }}
      run: |
        python scripts/send_daily_email.py
    
    - name: Send error notification
      if: steps.collection.outputs.collection_status != '0'
      env:
        ERROR_LOG: collection_output.log
      run: |
        python scripts/send_error_notification.py
    
    - name: Upload reports as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: daily-reports-${{ github.run_number }}
        path: |
          data/reports/
          logs/
          collection_output.log
        retention-days: 30
    
    - name: Update job summary
      if: always()
      run: |
        echo "## 📊 Relatório de Execução - $(date '+%d/%m/%Y')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.collection.outputs.collection_status }}" == "0" ]; then
          echo "✅ **Status**: Coleta executada com sucesso" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.collection.outputs.report_generated }}" == "true" ]; then
            echo "📈 **Artigos coletados**: ${{ steps.collection.outputs.total_articles }}" >> $GITHUB_STEP_SUMMARY
            echo "🔓 **Open Insurance**: ${{ steps.collection.outputs.open_insurance_articles }}" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Status**: Erro na coleta" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🕐 **Horário de execução**: $(date '+%d/%m/%Y às %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
          echo "🧪 **Modo**: Teste (e-mails não enviados)" >> $GITHUB_STEP_SUMMARY
        fi

  # Job separado para monitoramento de fontes
  monitor-sources:
    runs-on: ubuntu-latest
    # Executa apenas às segundas-feiras para verificar saúde das fontes
    if: github.event.schedule && github.event.schedule == '0 7 * * 1'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test all sources
      run: |
        python -m src.main --action test > sources_test.log 2>&1
        echo "Sources test completed"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: sources-test-${{ github.run_number }}
        path: sources_test.log
        retention-days: 7

