name: Manual News Collection

on:
  workflow_dispatch:
    inputs:
      sources:
        description: 'Fontes específicas (separadas por vírgula) ou "all" para todas'
        required: false
        default: 'all'
        type: string
      send_email:
        description: 'Enviar e-mail após coleta'
        required: false
        default: 'false'
        type: boolean
      test_sources:
        description: 'Apenas testar fontes (não coletar)'
        required: false
        default: 'false'
        type: boolean
      region_filter:
        description: 'Filtrar por região'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - Brasil
        - América do Sul
        - Estados Unidos
        - Europa

jobs:
  manual-collection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create config directories
      run: |
        mkdir -p config
        mkdir -p data/reports
        mkdir -p logs
    
    - name: Setup Gmail credentials
      if: github.event.inputs.send_email == 'true'
      env:
        GMAIL_CREDENTIALS: ${{ secrets.GMAIL_CREDENTIALS }}
        GMAIL_TOKEN: ${{ secrets.GMAIL_TOKEN }}
      run: |
        echo "$GMAIL_CREDENTIALS" > config/credentials.json
        if [ ! -z "$GMAIL_TOKEN" ]; then
          echo "$GMAIL_TOKEN" > config/token.json
        fi
    
    - name: Setup email configuration
      if: github.event.inputs.send_email == 'true'
      env:
        EMAIL_RECIPIENTS_DAILY: ${{ secrets.EMAIL_RECIPIENTS_DAILY }}
        EMAIL_RECIPIENTS_ALERTS: ${{ secrets.EMAIL_RECIPIENTS_ALERTS }}
        EMAIL_RECIPIENTS_ERRORS: ${{ secrets.EMAIL_RECIPIENTS_ERRORS }}
      run: |
        python scripts/setup_email_config.py
    
    - name: Test sources only
      if: github.event.inputs.test_sources == 'true'
      run: |
        echo "🧪 Testando fontes..."
        python -m src.main --action test > test_output.log 2>&1
        echo "Teste concluído"
    
    - name: Run manual collection
      if: github.event.inputs.test_sources != 'true'
      env:
        SOURCES: ${{ github.event.inputs.sources }}
        REGION_FILTER: ${{ github.event.inputs.region_filter }}
      run: |
        echo "🔍 Executando coleta manual..."
        echo "Fontes: $SOURCES"
        echo "Região: $REGION_FILTER"
        
        if [ "$SOURCES" != "all" ]; then
          python scripts/manual_collection.py --sources "$SOURCES" --region "$REGION_FILTER"
        else
          python -m src.main --action collect
        fi
    
    - name: Send email if requested
      if: github.event.inputs.send_email == 'true' && github.event.inputs.test_sources != 'true'
      run: |
        echo "📧 Enviando e-mail..."
        python scripts/send_daily_email.py
    
    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: manual-collection-${{ github.run_number }}
        path: |
          data/reports/
          logs/
          test_output.log
        retention-days: 7
    
    - name: Update job summary
      if: always()
      run: |
        echo "## 🔧 Execução Manual - $(date '+%d/%m/%Y às %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Parâmetros:**" >> $GITHUB_STEP_SUMMARY
        echo "- Fontes: ${{ github.event.inputs.sources }}" >> $GITHUB_STEP_SUMMARY
        echo "- Região: ${{ github.event.inputs.region_filter }}" >> $GITHUB_STEP_SUMMARY
        echo "- Enviar e-mail: ${{ github.event.inputs.send_email }}" >> $GITHUB_STEP_SUMMARY
        echo "- Apenas teste: ${{ github.event.inputs.test_sources }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_sources }}" == "true" ]; then
          echo "🧪 **Modo**: Teste de fontes" >> $GITHUB_STEP_SUMMARY
          if [ -f "test_output.log" ]; then
            echo "📋 **Resultado do teste:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -10 test_output.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "📊 **Modo**: Coleta de notícias" >> $GITHUB_STEP_SUMMARY
          if [ -f "data/reports/relatorio_seguros_$(date +%Y-%m-%d).json" ]; then
            TOTAL_ARTICLES=$(python -c "import json; data=json.load(open('data/reports/relatorio_seguros_$(date +%Y-%m-%d).json')); print(data['total_articles'])" 2>/dev/null || echo "0")
            echo "📈 **Artigos coletados**: $TOTAL_ARTICLES" >> $GITHUB_STEP_SUMMARY
          fi
        fi

