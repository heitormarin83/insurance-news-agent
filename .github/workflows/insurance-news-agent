name: Insurance News Agent

on:
  workflow_dispatch:
  schedule:
    - cron: "15 9 * * *" # 06:15 BRT

permissions:
  contents: read

env:
  TZ: America/Sao_Paulo
  PYTHONUNBUFFERED: "1"
  # Recipients podem estar vazios sem quebrar o job
  EMAIL_RECIPIENTS_DAILY: ${{ secrets.EMAIL_RECIPIENTS_DAILY }}
  EMAIL_RECIPIENTS_ALERTS: ${{ secrets.EMAIL_RECIPIENTS_ALERTS }}
  EMAIL_RECIPIENTS_ERRORS: ${{ secrets.EMAIL_RECIPIENTS_ERRORS }}
  # Credenciais de e-mail (opcionais; o job funciona sem elas)
  GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
  GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}

jobs:
  run-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Mark run start
        run: |
          echo "==> Run started at $(date -u +%Y-%m-%dT%H:%M:%SZ)"

      # Coleta/ETL principal
      - name: Run collection and build report
        id: collection
        run: |
          set -e
          python -u src/main.py 2>&1 | tee collection_output.log

          # Descobre o arquivo de relatório esperado (formato usado pelo app)
          REPORT_PATH=$(python - <<'PY'
import datetime, os, glob
d = datetime.datetime.now().strftime("%Y-%m-%d")
candidates = sorted(glob.glob(f"data/reports/daily_report_{d}*.json"))
print(candidates[-1] if candidates else "")
PY
)
          if [ -n "$REPORT_PATH" ] && [ -f "$REPORT_PATH" ]; then
            echo "report_generated=true" >> "$GITHUB_OUTPUT"
            echo "report_path=$REPORT_PATH" >> "$GITHUB_OUTPUT"
            echo "Report found at: $REPORT_PATH"
          else
            echo "report_generated=false" >> "$GITHUB_OUTPUT"
            echo "No report file found for today."
          fi

      # Valida credenciais de e-mail e exporta um flag
      - name: Check email credentials
        id: emailcreds
        run: |
          if [ -n "${GMAIL_EMAIL}" ] && [ -n "${GMAIL_APP_PASSWORD}" ]; then
            echo "has_email_creds=true" >> "$GITHUB_OUTPUT"
            echo "Email credentials detected."
          else
            echo "has_email_creds=false" >> "$GITHUB_OUTPUT"
            echo "::warning::Email credentials not configured (GMAIL_EMAIL / GMAIL_APP_PASSWORD). Email steps will be skipped."
          fi

      # Envia e-mail diário somente se houver relatório E credenciais
      - name: Send daily email
        if: steps.collection.outputs.report_generated == 'true' && steps.emailcreds.outputs.has_email_creds == 'true'
        run: |
          echo "Sending daily email report..."
          python -u scripts/send_daily_email.py 2>&1 | tee email_output.log

      # Sempre publique os artefatos (logs/relatório) para debug
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            collection_output.log
            email_output.log
            ${{ steps.collection.outputs.report_path }}
          if-no-files-found: ignore
          retention-days: 7

      # Resumo amigável no UI do Actions
      - name: Job summary
        if: always()
        run: |
          {
            echo "## Insurance News Agent – Summary"
            echo ""
            echo "- Report generated: **${{ steps.collection.outputs.report_generated }}**"
            echo "- Email creds present: **${{ steps.emailcreds.outputs.has_email_creds }}**"
            if [ "${{ steps.collection.outputs.report_generated }}" = "true" ]; then
              echo "- Report path: \`${{ steps.collection.outputs.report_path }}\`"
            fi
            echo ""
            echo "### Next steps"
            if [ "${{ steps.emailcreds.outputs.has_email_creds }}" != "true" ]; then
              echo "- Configure \`GMAIL_EMAIL\` e \`GMAIL_APP_PASSWORD\` em **Settings → Secrets and variables → Actions**."
            fi
          } >> $GITHUB_STEP_SUMMARY

      # Notificação de erro por e-mail, somente se falhar E houver credenciais
      - name: Send error notification
        if: failure() && steps.emailcreds.outputs.has_email_creds == 'true'
        run: |
          echo "Sending error notification..."
          python -u scripts/send_error_notification.py "GitHub Actions Workflow Failed" "$(tail -n 200 collection_output.log || true)" 2>&1 | tee error_notification.log

      - name: Upload error email artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-artifacts
          path: |
            error_notification.log
            collection_output.log
          if-no-files-found: ignore
          retention-days: 7
