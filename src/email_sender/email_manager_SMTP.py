"""
Email Manager - Vers√£o SMTP
Substitui a complexidade do Gmail API por SMTP simples
"""

import os
import yaml
from typing import List, Dict, Any, Optional
from pathlib import Path
from datetime import datetime

from src.models import DailyReport, NewsArticle
from src.utils.logger import get_logger

# Importa o SMTP Sender ao inv√©s do Gmail Sender
import sys
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
from smtp_sender import SMTPSender
from src.email_sender.email_template import EmailTemplate

logger = get_logger("email_manager")


class EmailManager:
    """
    Gerenciador de e-mails usando SMTP
    Vers√£o simplificada sem OAuth
    """
    
    def __init__(self, config_path: str = "config/email_config.yaml"):
        """
        Inicializa o gerenciador de e-mails
        
        Args:
            config_path: Caminho para arquivo de configura√ß√£o
        """
        self.config_path = Path(config_path)
        self.config = self._load_config()
        
        # Usa SMTP Sender ao inv√©s de Gmail Sender
        self.sender = SMTPSender()
        self.template = EmailTemplate()
        
        self.logger = logger
        self.logger.info("Email Manager inicializado (SMTP)")
    
    def _load_config(self) -> Dict[str, Any]:
        """Carrega configura√ß√£o de e-mail"""
        try:
            if not self.config_path.exists():
                logger.warning(f"Arquivo de configura√ß√£o n√£o encontrado: {self.config_path}")
                return self._get_default_config()
            
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            logger.info("Configura√ß√£o de e-mail carregada")
            return config
            
        except Exception as e:
            logger.error(f"Erro ao carregar configura√ß√£o: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Retorna configura√ß√£o padr√£o"""
        return {
            'recipients': {
                'daily_report': [],
                'alerts': [],
                'errors': []
            },
            'templates': {
                'max_top_articles': 10,
                'include_article_summaries': True,
                'include_detailed_stats': True
            },
            'sending': {
                'immediate_open_insurance_alerts': True,
                'alert_relevance_threshold': 0.7
            }
        }
    
    def authenticate(self) -> bool:
        """
        Autentica com o servi√ßo de e-mail
        
        Returns:
            True se autentica√ß√£o bem-sucedida
        """
        try:
            return self.sender.authenticate()
        except Exception as e:
            self.logger.error(f"‚ùå Falha na autentica√ß√£o do Email Manager: {e}")
            return False
    
    def validate_configuration(self) -> Dict[str, Any]:
        """
        Valida configura√ß√£o do sistema de e-mail
        
        Returns:
            Dicion√°rio com status da valida√ß√£o
        """
        # Valida SMTP
        smtp_validation = self.sender.validate_configuration()
        
        # Conta destinat√°rios
        recipients = self.config.get('recipients', {})
        daily_recipients = recipients.get('daily_report', [])
        
        # Valida√ß√£o geral
        issues = []
        if not smtp_validation['valid']:
            issues.extend(smtp_validation['issues'])
        
        if not daily_recipients:
            issues.append("Nenhum destinat√°rio configurado para relat√≥rio di√°rio")
        
        return {
            'valid': len(issues) == 0,
            'issues': issues,
            'recipients_count': len(daily_recipients),
            'smtp_status': smtp_validation,
            'config_loaded': bool(self.config)
        }
    
    def send_daily_report(self, report: DailyReport) -> bool:
        """
        Envia relat√≥rio di√°rio por e-mail
        
        Args:
            report: Relat√≥rio di√°rio para enviar
            
        Returns:
            True se envio bem-sucedido
        """
        try:
            # Obt√©m destinat√°rios
            recipients = self.config.get('recipients', {}).get('daily_report', [])
            
            if not recipients:
                self.logger.warning("Nenhum destinat√°rio configurado para relat√≥rio di√°rio")
                return False
            
            # Gera conte√∫do do e-mail
            subject = f"üìä Relat√≥rio Di√°rio de Seguros - {report.date.strftime('%d/%m/%Y')}"
            
            # Gera HTML usando template
            html_body = self.template.generate_daily_report_html(report)
            
            # Gera vers√£o texto
            text_body = self.template.generate_daily_report_text(report)
            
            # Envia e-mail
            success = self.sender.send_email(
                to_emails=recipients,
                subject=subject,
                html_body=html_body,
                text_body=text_body
            )
            
            if success:
                self.logger.info(f"‚úÖ Relat√≥rio di√°rio enviado para {len(recipients)} destinat√°rio(s)")
            else:
                self.logger.error("‚ùå Falha no envio do relat√≥rio di√°rio")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar relat√≥rio di√°rio: {e}")
            return False
    
    def send_open_insurance_alert(self, articles: List[NewsArticle]) -> bool:
        """
        Envia alerta sobre artigos de Open Insurance
        
        Args:
            articles: Lista de artigos sobre Open Insurance
            
        Returns:
            True se envio bem-sucedido
        """
        try:
            if not articles:
                return True  # Nada para enviar
            
            # Obt√©m destinat√°rios
            recipients = self.config.get('recipients', {}).get('alerts', [])
            
            if not recipients:
                self.logger.info("Nenhum destinat√°rio configurado para alertas")
                return True
            
            # Gera conte√∫do do alerta
            subject = f"üö® Alerta Open Insurance - {len(articles)} novo(s) artigo(s)"
            
            html_body = self.template.generate_open_insurance_alert_html(articles)
            text_body = self.template.generate_open_insurance_alert_text(articles)
            
            # Envia e-mail
            success = self.sender.send_email(
                to_emails=recipients,
                subject=subject,
                html_body=html_body,
                text_body=text_body
            )
            
            if success:
                self.logger.info(f"‚úÖ Alerta Open Insurance enviado para {len(recipients)} destinat√°rio(s)")
            else:
                self.logger.error("‚ùå Falha no envio do alerta Open Insurance")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar alerta Open Insurance: {e}")
            return False
    
    def send_error_notification(self, error_details: Dict[str, Any]) -> bool:
        """
        Envia notifica√ß√£o de erro
        
        Args:
            error_details: Detalhes do erro
            
        Returns:
            True se envio bem-sucedido
        """
        try:
            # Obt√©m destinat√°rios
            recipients = self.config.get('recipients', {}).get('errors', [])
            
            if not recipients:
                self.logger.info("Nenhum destinat√°rio configurado para erros")
                return True
            
            # Gera conte√∫do da notifica√ß√£o
            subject = f"‚ùå Erro no Insurance News Agent - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
            
            html_body = self.template.generate_error_notification_html(error_details)
            text_body = self.template.generate_error_notification_text(error_details)
            
            # Envia e-mail
            success = self.sender.send_email(
                to_emails=recipients,
                subject=subject,
                html_body=html_body,
                text_body=text_body
            )
            
            if success:
                self.logger.info(f"‚úÖ Notifica√ß√£o de erro enviada para {len(recipients)} destinat√°rio(s)")
            else:
                self.logger.error("‚ùå Falha no envio da notifica√ß√£o de erro")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao enviar notifica√ß√£o de erro: {e}")
            return False
    
    def send_test_email(self, to_email: str) -> bool:
        """
        Envia e-mail de teste
        
        Args:
            to_email: Destinat√°rio do teste
            
        Returns:
            True se teste bem-sucedido
        """
        return self.sender.send_test_email(to_email)
    
    def add_recipient(self, email: str, category: str = 'daily_report') -> bool:
        """
        Adiciona destinat√°rio √† configura√ß√£o
        
        Args:
            email: E-mail do destinat√°rio
            category: Categoria (daily_report, alerts, errors)
            
        Returns:
            True se adicionado com sucesso
        """
        try:
            if 'recipients' not in self.config:
                self.config['recipients'] = {}
            
            if category not in self.config['recipients']:
                self.config['recipients'][category] = []
            
            if email not in self.config['recipients'][category]:
                self.config['recipients'][category].append(email)
                
                # Salva configura√ß√£o atualizada
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True)
                
                self.logger.info(f"Destinat√°rio adicionado: {email} ({category})")
                return True
            else:
                self.logger.info(f"Destinat√°rio j√° existe: {email} ({category})")
                return True
                
        except Exception as e:
            self.logger.error(f"Erro ao adicionar destinat√°rio: {e}")
            return False

